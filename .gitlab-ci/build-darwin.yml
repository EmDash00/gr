darwin-self-contained:
  stage: build
  image: macos:sonoma-gr-build
  tags:
  - utm
  script:
  - |-
    create_artifacts_directory() {
      mkdir artifacts
      cp lib/gks/demo artifacts/gksdemo
      cp lib/gr/demo artifacts/grdemo
      cp lib/gks/libGKS.dylib lib/gks/libGKS.a lib/gks/plugin/*.so lib/gr/libGR.dylib lib/gr/libGR.a lib/gr3/libGR3.dylib \
         lib/grm/libGRM.a lib/grm/libGRM.dylib lib/gr/qtgr/*.dylib artifacts/
      cp -r lib/gks/fonts artifacts/
      mkdir artifacts/include/
      cp lib/gks/gks.h lib/gr/gr.h lib/gr3/gr3.h lib/grm/include/grm.h lib/gr/qtgr/grwidget.h artifacts/include/
      cp -r lib/grm/include/grm artifacts/include/
      mkdir artifacts/Applications/
      cp -r lib/gks/quartz/build/Release/GKSTerm.app artifacts/Applications/GKSTerm.app
      cp -r lib/gks/qt/gksqt.app artifacts/Applications/gksqt.app
      mkdir -p artifacts/Applications/gksqt.app/Contents/Frameworks
      mkdir -p artifacts/Applications/gksqt.app/Contents/plugins/platforms
      cp /usr/local/qt6/plugins/platforms/libqcocoa.dylib artifacts/Applications/gksqt.app/Contents/plugins/platforms
      mkdir -p artifacts/share/doc/grplot
      cp lib/grm/grplot/README.md artifacts/share/doc/grplot/grplot.man.md
      mkdir -p artifacts/share/licenses/GR
      cp LICENSE.md artifacts/share/licenses/GR/
      mkdir -p artifacts/share/xml/GRM
      cp lib/grm/src/grm/dom_render/graphics_tree/schema.xsd artifacts/share/xml/GRM/grm_graphics_tree_schema.xsd
      cp lib/grm/src/grm/dom_render/graphics_tree/private_schema.xsd artifacts/share/xml/GRM/grm_graphics_tree_private_schema.xsd
      cp -r lib/grm/grplot/grplot.app artifacts/Applications/grplot.app
      mkdir -p artifacts/Applications/grplot.app/Contents/Frameworks
      mkdir -p artifacts/Applications/grplot.app/Contents/plugins/platforms
      cp /usr/local/qt6/plugins/platforms/libqcocoa.dylib artifacts/Applications/grplot.app/Contents/plugins/platforms
      cd artifacts/Applications
      for BINARY in gksqt.app/Contents/plugins/platforms/libqcocoa.dylib gksqt.app/Contents/MacOS/gksqt; do
        for QT_FRAMEWORK in `otool -L $BINARY | tr '/' '\n' | grep -E 'Qt.*\.framework' | cut -d. -f1 | uniq`; do
          rsync -a --exclude Headers --exclude *_debug* /usr/local/qt6/lib/$QT_FRAMEWORK.framework gksqt.app/Contents/Frameworks/
          install_name_tool -change `otool -L $BINARY | grep $QT_FRAMEWORK | cut -d\( -f1 | head -1` @executable_path/../Frameworks/$QT_FRAMEWORK.framework/Versions/Current/$QT_FRAMEWORK $BINARY
        done
      done
      for BINARY in grplot.app/Contents/plugins/platforms/libqcocoa.dylib grplot.app/Contents/MacOS/grplot; do
        for QT_FRAMEWORK in `otool -L $BINARY | tr '/' '\n' | grep -E 'Qt.*\.framework' | cut -d. -f1 | uniq`; do
          rsync -a --exclude Headers --exclude *_debug* /usr/local/qt6/lib/$QT_FRAMEWORK.framework grplot.app/Contents/Frameworks/
          install_name_tool -change `otool -L $BINARY | grep $QT_FRAMEWORK | cut -d\( -f1 | head -1` @executable_path/../Frameworks/$QT_FRAMEWORK.framework/Versions/Current/$QT_FRAMEWORK $BINARY
        done
      done
      for APP in gksqt.app grplot.app; do
        codesign -f -s - ${APP}
        codesign -f -s - ${APP}/Contents/Frameworks/*.framework
        codesign -f -s - ${APP}/Contents/Frameworks/Qt*.framework/Qt*
        codesign -f -s - ${APP}/Contents/plugins/platforms/libqcocoa.dylib
      done
      cd ../../
    }
  - |-
    merge_artifacts () (
      needs_merge () {
        local filepath file_cmd_output

        filepath="$1"
        file_cmd_output="$(file -b "${filepath}" | head -1)"
        if [[ "${file_cmd_output}" =~ (Mach-O.*(shared library|executable))|ar\ archive ]]; then
          [[ ! "${file_cmd_output}" =~ universal\ binary ]]
          return
        fi

        return 1
      }

      create_directory_preserved () {
        local original_dir new_dir owner group mode

        original_dir="$1"
        new_dir="$2"

        owner=$(stat -f "%Su" "${original_dir}")
        group=$(stat -f "%Sg" "${original_dir}")
        mode=$(stat -f "%A" "${original_dir}")

        install -d -m "${mode}" -o "${owner}" -g "${group}" "${new_dir}"
      }

      merge_directories () {
        local src_a src_b dest filepath dirpath

        src_a="$1"
        src_b="$2"
        dest="$3"

        echo "Create directory \"${dest}\" (apply ownership and mode from \"${src_a}\")"
        create_directory_preserved "${src_a}" "${dest}"
        while IFS= read -r filepath; do
          filepath="${filepath#./}"
          if needs_merge "${src_a}/${filepath}"; then
            echo "Merge \"${src_a}/${filepath}\" and \"${src_b}/${filepath}\" -> \"${dest}/${filepath}\""
            lipo -create "${src_a}/${filepath}" "${src_b}/${filepath}" -output "${dest}/${filepath}"
          else
            echo "Copy file \"${src_a}/${filepath}\" -> \"${dest}/${filepath}\""
            cp -a "${src_a}/${filepath}" "${dest}/${filepath}"
          fi
        done < <(cd "${src_a}" && find . -mindepth 1 -maxdepth 1 -type f)
        while IFS= read -r filepath; do
          filepath="${filepath#./}"
          echo "Copy symlink \"${src_a}/${filepath}\" -> \"${dest}/${filepath}\""
          cp -a "${src_a}/${filepath}" "${dest}/${filepath}"
        done < <(cd "${src_a}" && find . -mindepth 1 -maxdepth 1 -type l)
        while IFS= read -r dirpath; do
          dirpath="${dirpath#./}"
          merge_directories "${src_a}/${dirpath}" "${src_b}/${dirpath}" "${dest}/${dirpath}"
        done < <(cd "${src_a}" && find . -mindepth 1 -maxdepth 1 -type d)
      }

      merge_directories "$@"
    )
  - export MACOSX_DEPLOYMENT_TARGET=10.15
  - sudo mkdir /usr/local/gr
  - sudo chown administrator:wheel /usr/local/gr
  - make self
    GRDIR="/usr/local/gr"
    QMAKE="/usr/local/qt6/bin/qmake"
    QT6_QMAKE="/usr/local/qt6/bin/qmake"
  - create_artifacts_directory
  - mv artifacts artifacts-darwin-aarch64
  - git clean -fdx --exclude=artifacts-darwin-aarch64
  - export MACOSX_DEPLOYMENT_TARGET=11.0
  - sudo rm -rf /usr/local/gr
  - sudo mkdir /usr/local/gr
  - sudo chown admin:wheel /usr/local/gr
  - make -C 3rdparty extras
    ARCHS="-arch x86_64"
    CC="cc -arch x86_64"
    CXX="c++ -arch x86_64"
    CAIRO_EXTRA_CONFIGURE_FLAGS="--host=x86_64-apple-darwin"
    FFMPEG_EXTRA_CONFIGURE_FLAGS="--arch=x86_64 --cc=\"cc -arch x86_64\" --cxx=\"c++ -arch x86_64\" --enable-cross-compile"
    GLFW_EXTRA_CMAKE_FLAGS="-DCMAKE_OSX_ARCHITECTURES=x86_64"
    OGG_EXTRA_CONFIGURE_FLAGS="--host=x86_64-apple-darwin"
    OPENH264_EXTRA_MAKE_FLAGS="ARCH=x86_64"
    PIXMAN_EXTRA_CONFIGURE_FLAGS="--host=x86_64-apple-darwin"
    THEORA_EXTRA_CONFIGURE_FLAGS="--host=x86_64-apple-darwin --disable-asm"
    TIFF_EXTRA_CONFIGURE_FLAGS="--host=x86_64-apple-darwin"
    XERCES_C_EXTRA_CMAKE_FLAGS="-DCMAKE_OSX_ARCHITECTURES=x86_64"
    ZEROMQ_EXTRA_CONFIGURE_FLAGS="--host=x86_64-apple-darwin"
  - make self
    ARCH="x86_64"
    CC="cc -arch x86_64"
    CXX="c++ -arch x86_64"
    EXPORT_ARCHS="x86_64"
    GRDIR="/usr/local/gr"
    QMAKE="/usr/local/qt6/bin/qmake"
    QT6_QMAKE="/usr/local/qt6/bin/qmake"
    QT_ARCH="x86_64"
  - create_artifacts_directory
  - mv artifacts artifacts-darwin-x86_64
  - merge_artifacts artifacts-darwin-aarch64 artifacts-darwin-x86_64 artifacts-darwin-universal
  artifacts:
    expire_in: 1 week
    paths:
    - artifacts-darwin-aarch64/
    - artifacts-darwin-universal/
    - artifacts-darwin-x86_64/
