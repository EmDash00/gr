ubuntu-cmake-self-contained-test-c:
  stage: test
  image: iffregistry.fz-juelich.de/scientific-it-systems/gr-test/c-testing
  rules:
  - if: '$CI_MERGE_REQUEST_ID'
    when: never
  - when: on_success
  needs:
  - ubuntu-cmake-self-contained-debug
  script:
  - export GRDIR=`pwd`/artifacts-ubuntu2004-cmake/
  - export GRM_VALIDATE=yes
  - gr_test c `pwd`/test_result/
  artifacts:
    paths:
    - test_result/
    when: on_failure

ubuntu-cmake-self-contained-test-cpp:
  stage: test
  image: iffregistry.fz-juelich.de/scientific-it-systems/gr-test/cpp-testing
  rules:
    - if: '$CI_MERGE_REQUEST_ID'
      when: never
    - when: on_success
  needs:
    - ubuntu-cmake-self-contained-debug
  script:
    - export GRDIR=`pwd`/artifacts-ubuntu2004-cmake/
    - export GRM_VALIDATE=yes
    - gr_test cpp `pwd`/test_result/
  artifacts:
    paths:
      - test_result/
    when: on_failure

ubuntu-cmake-self-contained-test-grplot:
  stage: test
  image: iffregistry.fz-juelich.de/scientific-it-systems/gr-test/grplot-testing
  rules:
  - if: '$CI_MERGE_REQUEST_ID'
    when: never
  - when: on_success
  needs:
  - ubuntu-cmake-self-contained-debug
  script:
  - export GRDIR=`pwd`/artifacts-ubuntu2004-cmake/
  - export GRM_VALIDATE=yes
  - export LD_LIBRARY_PATH=$GRDIR/lib
  - export PATH=$GRDIR/bin/:$PATH
  - xvfb-run --server-args="-screen 0, 1920x1080x24" gr_test grplot `pwd`/test_result/
  artifacts:
    paths:
    - test_result/
    when: on_failure

ubuntu-cmake-self-contained-test-update-prepare:
  stage: test
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/ubuntu-self-contained
  needs:
  - job: ubuntu-cmake-self-contained-test-c
    artifacts: true
    optional: true
  - job: ubuntu-cmake-self-contained-test-cpp
    artifacts: true
    optional: true
  - job: ubuntu-cmake-self-contained-test-grplot
    artifacts: true
    optional: true
  when: on_failure
  allow_failure: true
  script:
  - find test_result/ -name '*_diff.png' -delete
  - find test_result/ -d -mindepth 2 -maxdepth 2 -exec mkdir '{}/REFERENCE' ";"
  - find test_result/ -d -mindepth 3 -maxdepth 3 ! -name 'REFERENCE' -execdir mv {} REFERENCE ";"
  artifacts:
    paths:
    - test_result/

ubuntu-cmake-self-contained-test-update:
  stage: test
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/ubuntu-self-contained
  needs:
  - job: ubuntu-cmake-self-contained-test-update-prepare
    artifacts: true
  when: manual
  script:
  - mkdir -p ~/.ssh
  - cat $SSH_KEY | base64 -d > ~/.ssh/id_rsa
  - mv $SSH_KNOWN_HOSTS ~/.ssh/known_hosts
  - chmod 600 ~/.ssh/id_rsa

  - git clone --depth=1 gitlab@iffgit.fz-juelich.de:scientific-it-systems/gr-test.git
  - cd gr-test
  - git checkout -b update-files/job-$CI_JOB_ID

  - if [[ -d "../test_result/c" ]]; then
      cp -R ../test_result/c/* gr_test/c_data/ ;
    fi
  - if [[ -d "../test_result/cpp" ]]; then
      cp -R ../test_result/cpp/* gr_test/cpp_data/ ;
    fi
  - if [[ -d "../test_result/grplot" ]]; then
      cp -R ../test_result/grplot/* gr_test/grplot_data/ ;
    fi
  - git config user.name "GR-Test Reference Bot"
  - git config user.email "$GITLAB_USER_EMAIL"
  - git status
  - git add -A gr_test/c_data/ gr_test/cpp_data/ gr_test/grplot_data/
  - git commit -m "Rebuilt c images in build job $CI_JOB_ID"
  - 'git push -o merge_request.description="Job initiator: @$GITLAB_USER_LOGIN" -o merge_request.label="auto-create" -o merge_request.label="reference-files-update" -o merge_request.remove_source_branch -o merge_request.create origin update-files/job-$CI_JOB_ID'

ubuntu-cmake-self-contained-test-snoop:
  stage: test
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/ubuntu-self-contained
  rules:
  - if: '$CI_MERGE_REQUEST_ID'
    when: never
  - if: '$CI_COMMIT_MESSAGE =~ /RebuildReferenceImages\([][ ?*_a-zA-Z0-9-]*\)/'
    when: never
  - if: '$GR_REBUILD_REFERENCE'
    when: never
  - when: on_success
  needs:
  - ubuntu-cmake-self-contained-debug
  variables:
    JULIA_VERSION: 1.8.5
  before_script:
  - apt-get update && apt-get install -y curl
  - curl -fLO "https://julialang-s3.julialang.org/bin/linux/x64/${JULIA_VERSION%.*}/julia-${JULIA_VERSION}-linux-x86_64.tar.gz"
  - tar -C/usr/local --strip=1 -xf "julia-${JULIA_VERSION}-linux-x86_64.tar.gz"
  - julia -e "using Pkg; Pkg.add(\"Images\")"
  - julia -e "using Pkg; Pkg.add(name=\"GR\", rev=\"master\")"
  script:
  - export GRDIR=`pwd`/artifacts-ubuntu2004-cmake/
  - export LD_LIBRARY_PATH=`pwd`/artifacts-ubuntu2004-cmake/lib
  - export LIBC_RAND_DIRPATH=`pwd`
  - export GRM_SNOOP_EXECUTABLE_PATH=`pwd`/grm_snoop
  - export GRM_VALIDATE=yes
  - lib/grm/test/public_api/grm/snoop/compare_grm_julia.sh || {
      mv lib/grm/test/public_api/grm/snoop/diff_images ./;
      exit 1;
    }
  artifacts:
    paths:
    - diff_images
    when: on_failure

code-style-check:
  stage: test
  needs: []
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  script:
  - set +e
  - for file in $(git diff $(git describe --tags --abbrev=0) HEAD --name-only --diff-filter=ACMR); do
      [[ "${file}" != 3rdparty* ]] && [[ "${file}" != apps* ]] || continue;
      [[ "${file}" =~ \.(c|cpp|cxx|m|h|hpp|hxx)$ ]] || continue;
      grep -vr $'\r' "${file}" >/dev/null || { echo "${file} must not contain carriage return as line endings."; exit 1; };
      file --mime "${file}" | grep "charset=us-ascii" >/dev/null || { echo "${file} must be encoded as ASCII text."; exit 1; };
      clang-format -verbose -style=file "${file}" > "${file}.formatted";
      if ! diff -q "${file}" "${file}.formatted"; then
        diff "${file}" "${file}.formatted";
        >&2 echo "The code style of file \"${file}\" does not follow the code style guideline of this project.";
        exit 1;
      fi;
      rm -f "${file}.formatted";
    done
  - for file in $(git diff $(git describe --tags --abbrev=0) HEAD --name-only --diff-filter=ACMR); do
      [[ "${file}" != 3rdparty* ]] && [[ "${file}" != apps* ]] || continue;
      [[ "${file}" =~ (^|/)CMakeLists.txt$ || "${file}" =~ \.cmake$ ]] || continue;
      grep -vr $'\r' "${file}" >/dev/null || { echo "${file} must not contain carriage return as line endings."; exit 1; };
      file --mime "${file}" | grep "charset=us-ascii" >/dev/null || { echo "${file} must be encoded as ASCII text."; exit 1; };
      echo "Formatting ${file}";
      cmake-format "${file}" > "${file}.formatted";
      if ! diff -q "${file}" "${file}.formatted"; then
        diff "${file}" "${file}.formatted";
        >&2 echo "The code style of file \"${file}\" does not follow the code style guideline of this project.";
        exit 1;
      fi;
      rm -f "${file}.formatted";
    done
  - exit 0

clang-tidy-check:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  allow_failure: true
  before_script:
  - git remote add upstream "https://gitlab-ci-token:${CI_JOB_TOKEN}@iffgit.fz-juelich.de/Scientific-IT-Systems/gr.git"
  - git fetch upstream
  # Report all warnings (from all checks) as errors
  # The `.clang-tidy` config file is edited on-the-fly, so local GR clones are not forced to use this setting (local
  # clang tooling is affected by this)
  - |-
    ex .clang-tidy <<'EOF'
    /^Checks
    y
    pu
    s/^Checks/WarningsAsErrors
    /^WarningsAsErrors
    d
    x
    EOF
  script:
  # clang-tidy checks are taken from CLion + default clang-tidy checks
  # (<https://youtrack.jetbrains.com/articles/CPP-A-90276519/Clang-Tidy-in-CLion-2021.3-default-configuration>)
  # see `.clang-tidy` for details on the used clang-tidy configuration
  - cmake
      -S .
      -B build
      -DCMAKE_BUILD_TYPE=Debug
      -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      -DGR_USE_BUNDLED_LIBRARIES=OFF
  - clang_tidy_failed=0;
    while IFS= read -r file; do
      [[ "${file}" != 3rdparty* ]] && [[ "${file}" != apps* ]] || continue;
      [[ "${file}" =~ \.(c|cpp|cxx|m|h|hpp|hxx)$ ]] || continue;
      echo "Processing ${file}...";
      TERM=ansi
      clang-tidy
        -p build
        --use-color
        "${file}"
      || clang_tidy_failed=1;
    done < <(git diff upstream/develop...HEAD --name-only --diff-filter=ACMR);
    exit ${clang_tidy_failed}
